def is_mst_unique(n, edges, given_mst):
    def find(x):
        if parent[x] != x:
            parent[x] = find(parent[x])
        return parent[x]
    
    def union(x, y):
        rootX, rootY = find(x), find(y)
        if rootX != rootY:
            if rank[rootX] > rank[rootY]:
                parent[rootY] = rootX
            elif rank[rootX] < rank[rootY]:
                parent[rootX] = rootY
            else:
                parent[rootY] = rootX
                rank[rootX] += 1
    
    mst_edges = set(given_mst)
    total_weight = sum(edge[2] for edge in mst_edges)
    
    parent = list(range(n))
    rank = [0] * n
    
    for u, v, w in given_mst:
        union(u, v)
    
    new_mst = []
    for u, v, w in edges:
        if (u, v, w) not in mst_edges and find(u) != find(v):
            new_mst.append((u, v, w))
            union(u, v)
            if len(new_mst) == n - 1:
                break
    
    if new_mst:
        return False, new_mst, total_weight
    else:
        return True, None, total_weight

# Test cases
print(is_mst_unique(4, [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)], [(2, 3, 4), (0, 3, 5), (0, 1, 10)]))  # Output: True
print(is_mst_unique(5, [(0, 1, 1), (0, 2, 1), (1, 3, 2), (2, 3, 2), (3, 4, 3), (4, 2, 3)], [(0, 1, 1), (0, 2, 1), (1, 3, 2), (3, 4, 3)]))  # Output: (False, [(2, 3, 2)], 7)
