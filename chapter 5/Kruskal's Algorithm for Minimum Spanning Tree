def kruskal(n, edges):
    parent = list(range(n))
    rank = [0] * n
    
    def find(x):
        if parent[x] != x:
            parent[x] = find(parent[x])
        return parent[x]
    
    def union(x, y):
        rootX, rootY = find(x), find(y)
        if rootX != rootY:
            if rank[rootX] > rank[rootY]:
                parent[rootY] = rootX
            elif rank[rootX] < rank[rootY]:
                parent[rootX] = rootY
            else:
                parent[rootY] = rootX
                rank[rootX] += 1
    
    edges.sort(key=lambda x: x[2])
    mst = []
    total_weight = 0
    
    for u, v, w in edges:
        if find(u) != find(v):
            union(u, v)
            mst.append((u, v, w))
            total_weight += w
    
    return mst, total_weight

# Test cases
print(kruskal(4, [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]))  # Output: ([(2, 3, 4), (0, 3, 5), (0, 1, 10)], 19)
print(kruskal(5, [(0, 1, 2), (0, 3, 6), (1, 2, 3), (1, 3, 8), (1, 4, 5), (2, 4, 7), (3, 4, 9)]))  # Output: ([(0, 1, 2), (1, 2, 3), (1, 4, 5), (0, 3, 6)], 16)
