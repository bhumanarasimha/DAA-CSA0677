def graph_coloring_min_colors(edges, n):
    from collections import defaultdict
    
    def is_valid(node, color, colors):
        for neighbor in graph[node]:
            if colors[neighbor] == color:
                return False
        return True
    
    graph = defaultdict(list)
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)
    
    def color_graph():
        colors = [-1] * n
        def backtrack(node):
            if node == n:
                return True
            for color in range(1, n+1):
                if is_valid(node, color, colors):
                    colors[node] = color
                    if backtrack(node + 1):
                        return True
                    colors[node] = -1
            return False
        
        if backtrack(0):
            return max(colors)
        return -1
    
    return color_graph()

# Test case
print(graph_coloring_min_colors([(0, 1), (1, 2), (2, 3), (3, 0), (0, 2)], 4))  # Output: 3
