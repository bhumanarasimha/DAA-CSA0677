def floyd_warshall(n: int, edges: List[List[int]]) -> Tuple[List[List[int]], List[List[int]]]:
    dist = [[float('inf')] * n for _ in range(n)]
    next_node = [[-1] * n for _ in range(n)]

    for i in range(n):
        dist[i][i] = 0

    for u, v, w in edges:
        dist[u][v] = w
        next_node[u][v] = v

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][k] + dist[k][j] < dist[i][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
                    next_node[i][j] = next_node[i][k]

    return dist, next_node

def print_matrix(matrix: List[List[int]]):
    for row in matrix:
        print(' '.join(f'{x:5}' if x != float('inf') else 'inf' for x in row))

# Example
n = 4
edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]]
dist, next_node = floyd_warshall(n, edges)

print("Distance Matrix:")
print_matrix(dist)
print("Shortest Path from City 1 to City 3:", dist[1][3])
